/*
Deployment script for SQLFundamentals

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SQLFundamentals"
:setvar DefaultFilePrefix "SQLFundamentals"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER01\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER01\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Table [dbo].[Address]...';


GO
CREATE TABLE [dbo].[Address] (
    [Id]      INT           IDENTITY (1, 1) NOT NULL,
    [Street]  NVARCHAR (50) NOT NULL,
    [City]    NVARCHAR (20) NULL,
    [State]   NVARCHAR (50) NULL,
    [ZipCode] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Company]...';


GO
CREATE TABLE [dbo].[Company] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (20) NOT NULL,
    [AddressId] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Employee]...';


GO
CREATE TABLE [dbo].[Employee] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [AddressId]    INT            NOT NULL,
    [PersonId]     INT            NOT NULL,
    [CompanyName]  NVARCHAR (20)  NOT NULL,
    [Position]     NVARCHAR (30)  NULL,
    [EmployeeName] NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Person]...';


GO
CREATE TABLE [dbo].[Person] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [FirstName] NVARCHAR (50) NOT NULL,
    [LastName]  NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[F_Company_Address$Id]...';


GO
ALTER TABLE [dbo].[Company] WITH NOCHECK
    ADD CONSTRAINT [F_Company_Address$Id] FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Address] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[F_Employee_Person$Id]...';


GO
ALTER TABLE [dbo].[Employee] WITH NOCHECK
    ADD CONSTRAINT [F_Employee_Person$Id] FOREIGN KEY ([PersonId]) REFERENCES [dbo].[Person] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[F_Employee_Address$Id]...';


GO
ALTER TABLE [dbo].[Employee] WITH NOCHECK
    ADD CONSTRAINT [F_Employee_Address$Id] FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Address] ([Id]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
IF NOT EXISTS(SELECT * FROM [dbo].[Address])
	BEGIN
		SET IDENTITY_INSERT [dbo].[Address] ON;

		INSERT [dbo].[Address] ([Id], [Street], [City], [State], [ZipCode]) VALUES (1, 'Park Avenue', 'New York', 'New York', '10001');
        INSERT [dbo].[Address] ([Id], [Street], [City], [State], [ZipCode]) VALUES (2, 'Broadway', 'New York', 'New York', '10002');
		
		SET IDENTITY_INSERT [dbo].[Address] OFF;
	END;

GO
IF NOT EXISTS(SELECT * FROM [dbo].[Company])
	BEGIN
		SET IDENTITY_INSERT [dbo].[Company] ON;

		INSERT [dbo].[Company] ([Id], [Name], [AddressId]) VALUES (1,'Microsoft', 1);
        INSERT [dbo].[Company] ([Id], [Name], [AddressId]) VALUES (2,'EPAM', 2);
		
		SET IDENTITY_INSERT [dbo].[Company] OFF;
	END;

GO
IF NOT EXISTS(SELECT * FROM [dbo].[Employee])	BEGIN		SET IDENTITY_INSERT [dbo].[Employee] ON;		INSERT [dbo].[Employee] ([Id], [AddressId], [PersonId], [CompanyName], [Position], [EmployeeName] ) VALUES (1, 1, 1, 'Micosoft', 'Ivanov');        INSERT [dbo].[Employee] ([Id], [AddressId], [PersonId], [CompanyName], [Position], [EmployeeName] ) VALUES (2, 2, 2, 'EPAM', 'Petrov');				SET IDENTITY_INSERT [dbo].[Employee] OFF;	END;
GO
IF NOT EXISTS(SELECT * FROM [dbo].[Person])	BEGIN		SET IDENTITY_INSERT [dbo].[Person] ON;		INSERT [dbo].[Person] ([Id], [FirstName], [LastName]) VALUES (1,'Ivanov', 'Ivan');        INSERT [dbo].[Person] ([Id], [FirstName], [LastName]) VALUES (2,'Petrov', 'Petr');				SET IDENTITY_INSERT [dbo].[Person] OFF;	END;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Company] WITH CHECK CHECK CONSTRAINT [F_Company_Address$Id];

ALTER TABLE [dbo].[Employee] WITH CHECK CHECK CONSTRAINT [F_Employee_Person$Id];

ALTER TABLE [dbo].[Employee] WITH CHECK CHECK CONSTRAINT [F_Employee_Address$Id];


GO
PRINT N'Update complete.';


GO
